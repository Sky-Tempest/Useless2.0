// Morse code to letter mapping
const morseToLetter = {
  '.-': 'A',    '-...': 'B',  '-.-.': 'C',
  '-..': 'D',   '.': 'E',     '..-.': 'F',
  '--.': 'G',   '....': 'H',  '..': 'I',
  '.---': 'J',  '-.-': 'K',   '.-..': 'L',
  '--': 'M',    '-.': 'N',    '---': 'O',
  '.--.': 'P',  '--.-': 'Q',  '.-.': 'R',
  '...': 'S',   '-': 'T',     '..-': 'U',
  '...-': 'V',  '.--': 'W',   '-..-': 'X',
  '-.--': 'Y',  '--..': 'Z',
  '-----': '0', '.----': '1', '..---': '2',
  '...--': '3', '....-': '4', '.....': '5',
  '-....': '6', '--...': '7', '---..': '8',
  '----.': '9'
};

// Letter to emoji mapping
const letterToEmoji = {
  A: 'üçé', B: 'üêù', C: 'üê±', D: 'üê¨', E: 'ü¶Ö',
  F: 'üê∏', G: 'ü¶í', H: 'üè†', I: 'üç¶', J: 'üïπÔ∏è',
  K: 'üîë', L: 'ü¶Å', M: 'üåù', N: 'üé∂', O: 'üêô',
  P: 'ü•û', Q: 'üëë', R: 'üåà', S: 'üêç', T: 'üå¥',
  U: '‚òÇÔ∏è', V: 'üéª', W: 'üåä', X: '‚ùå', Y: 'üõ≥Ô∏è',
  Z: 'ü¶ì',
  0: '0Ô∏è‚É£', 1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£',
  5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£', 8: '8Ô∏è‚É£', 9: '9Ô∏è‚É£'
};

// Full-word to emoji mapping (word-level)
const wordToEmoji = {
  HELLO: 'üëãüòä',
  LOVE: '‚ù§Ô∏èüòç',
  FIRE: 'üî•üî•',
  COOL: 'üòéüÜí',
  TIMEOUT: '‚è±Ô∏è‚ùå',
  SLEEP: 'üò¥üõå',
  CAT: 'üê±üêæ',
  DOG: 'üê∂üêæ',
  HAPPY: 'üòÅüéâ',
  SAD: 'üò¢üíß',
  FOOD: 'üçïüçîüçü',
  WATER: 'üíßüö∞',
  WORK: 'üíºüß†',
  STUDY: 'üìöüß†',
  BORED: 'ü•±üì¥',
  FUNNY: 'üòÇü§£',
  MUSIC: 'üéµüéß',
  DANCE: 'üíÉüï∫',
  COFFEE: '‚òïüî•',
  MORSE: 'üì°üìª',
  EMOJI: 'üòúüî§',
  SMILE: 'üòÑüòÅ',
  CRY: 'üò≠üíî',
  ANGRY: 'üò°üí¢',
  LAUGH: 'ü§£üòÜ',
  BRAIN: 'üß†‚ö°',
  HUNGRY: 'üçΩÔ∏èüòã',
  RUN: 'üèÉüí®',
  WALK: 'üö∂‚Äç‚ôÇÔ∏èüë£',
  STOP: '‚úãüö´',
  GO: 'üü¢üöÄ',
  SING: 'üé§üé∂',
  CODE: 'üíªüßë‚Äçüíª',
  ERROR: '‚ùåüí•',
  DEBUG: 'üïµÔ∏è‚Äç‚ôÇÔ∏èüîç',
  TIRED: 'ü•±üò©',
  GAME: 'üéÆüïπÔ∏è',
  TRAVEL: '‚úàÔ∏èüß≥',
  PARTY: 'üéâü•≥',
  ZOMBIE: 'üßü‚Äç‚ôÇÔ∏èüß†',
  ALIEN: 'üëΩüõ∏',
  CLOWN: 'ü§°üé™',
  SUGAR: 'üç¨üç≠',
  MEME: 'üì±üòπ',
  GHOST: 'üëªüí®',
  SICK: 'ü§íüßª',
  PANIC: 'üò±üö®',
  CHAOS: 'üå™Ô∏èüåÄ',
  WOW: 'üò≤ü§Ø',
  YAWN: 'üò™üò¥',
  WASTE: 'üóëÔ∏èüöΩ',
  USELESS: 'ü™¶üìâ',
  INTERNET: 'üåêüì°',
  HACK: 'üíªüîì',
  PROJECT: 'üìÅüîß',
  CATDOG: 'üê±üê∂',
  ROBOT: 'ü§ñüîã',
  IDEA: 'üí°‚öôÔ∏è',
  SPAM: 'üì©ü•´',
  BROKEN: 'üîßüß®',
  SMART: 'üß†üìà',
  DUMB: 'üôÉüìâ',
  LAZY: 'üõãÔ∏èüõå',
  FAST: 'üöÄ‚ö°',
  SLOW: 'üê¢‚è≥',
  NOISE: 'üîäüì¢',
  SILENT: 'ü§´üîá',
  SUSHI: 'üç£ü•¢',
  BURGER: 'üçîüßÄ',
  PIZZA: 'üçïüç¥',
  DONUT: 'üç©üç´',
  ICECREAM: 'üç¶‚ùÑÔ∏è',
  WINNER: 'üèÜü•á',
  LOSER: 'üòµüìâ',
  FROG: 'üê∏üé©',
  BANANA: 'üçåüíõ',
  SOS: 'üÜòüö®'
};

// Main translation function
function translateMorseToEmoji(morseInput) {
  // Input validation
  if (!morseInput || !morseInput.trim()) {
    return '';
  }

  // Clean input - remove extra whitespace and invalid characters
  const cleanInput = morseInput.trim().replace(/[^.\-\s\/]/g, '');
  
  if (!cleanInput) {
    return '';
  }

  // Handle different word separation formats
  let words;
  if (cleanInput.includes(' / ')) {
    // Traditional format with " / " as word separator
    words = cleanInput.split(' / ');
  } else if (cleanInput.includes('   ')) {
    // Multiple spaces as word separator
    words = cleanInput.split(/\s{3,}/);
  } else {
    // Treat as single word (common for simple examples)
    words = [cleanInput];
  }

  let finalEmoji = '';

  words.forEach(morseWord => {
    if (!morseWord.trim()) return;
    
    const letterCodes = morseWord.trim().split(/\s+/);
    let decodedWord = '';

    // Convert Morse to letters
    for (let code of letterCodes) {
      if (code && morseToLetter[code]) {
        decodedWord += morseToLetter[code];
      }
    }

    if (!decodedWord) return;

    const upperWord = decodedWord.toUpperCase();

    // First check full-word emoji match
    if (wordToEmoji[upperWord]) {
      finalEmoji += wordToEmoji[upperWord] + ' ';
    } else {
      // Fallback to letter-to-emoji
      for (let char of upperWord) {
        finalEmoji += letterToEmoji[char] || '‚ùì';
      }
      finalEmoji += ' ';
    }
  });

  return finalEmoji.trim();
}

// HTML Interface Functions

function handleInput() {
  const input = document.getElementById('morseInput').value;
  const translateBtn = document.getElementById('translateBtn');
  
  // Enable/disable translate button based on input
  if (input.trim()) {
    translateBtn.disabled = false;
    translateBtn.classList.remove('opacity-50', 'cursor-not-allowed');
  } else {
    translateBtn.disabled = true;
    translateBtn.classList.add('opacity-50', 'cursor-not-allowed');
  }
}

function translateMorse() {
  const input = document.getElementById('morseInput').value;
  const output = document.getElementById('emojiOutput');
  
  if (!input.trim()) {
    output.innerHTML = '<div class="placeholder-text text-base text-gray-500 italic">Please enter some Morse code first! üìª</div>';
    return;
  }

  // Show loading state
  output.innerHTML = '<div class="loading text-base text-gray-500 italic">Translating... ‚ö°</div>';
  
  // Small delay for better UX
  setTimeout(() => {
    const result = translateMorseToEmoji(input);
    
    if (result) {
      output.innerHTML = result;
      output.classList.add('has-content');
      
      // Remove placeholder styling
      const placeholder = output.querySelector('.placeholder-text');
      if (placeholder) {
        placeholder.remove();
      }
    } else {
      output.innerHTML = '<div class="text-base text-red-500 italic">Invalid Morse code or no translation found! ü§î</div>';
    }
  }, 300);
}

function loadExample(exampleMorse) {
  const input = document.getElementById('morseInput');
  input.value = exampleMorse;
  
  // Trigger input handler to update button state
  handleInput();
  
  // Auto-translate the example
  translateMorse();
  
  // Add visual feedback
  input.classList.add('border-green-400');
  setTimeout(() => {
    input.classList.remove('border-green-400');
  }, 1000);
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
  // Set initial button state
  handleInput();
  
  // Add Enter key support for translation
  document.getElementById('morseInput').addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && e.ctrlKey) {
      translateMorse();
    }
  });
});